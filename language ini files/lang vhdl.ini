[VHDL]
Extensions=vhd vhdl vho
Keywords=abs access active after alias all and architecture array assert attribute
Keywords=begin block body boolean buffer bus case component configuration constant
Keywords=disconnect downto else elsif end entity event exit false file for function
Keywords=generate generic group guarded high if impure in inertial inout integer
Keywords=is label last_active last_event last_value left length library linkage
Keywords=literal loop low map mod nand natural new next nor not now null of on open
Keywords=or others out package port postponed procedure process pure range real
Keywords=record register reject rem report return reverse_range right rol ror select
Keywords=severity shared signal sla sll sra srl subtype then time to transport true
Keywords=type unaffected units until use variable wait when while with xnor xor
Default_Comment_Start=--
String_Bounds_Char="
Character_Bounds_Char='
Compiler=vcom %p
Error_In=%[ *]*{[Ee]rror}:  *[~a-zA-z]*{[~ (]*}({[1-9][0-9]*}):  *{?*}$
Warning_In=%[ *]*{[a-zA-Z]*}:  *[~a-zA-Z]*{[~ (]*}({[1-9][0-9]*}):  *{?*}$
Error_Out=@2 @3 0 @1: @4
Warning_Out=@2 @3 0 @1: @4
Error_Source=0

[Macro wait until clk]
Key=Ctrl 4
Macro="  wait until rising_edge(clk);\n"

[Macro suv8_array]
Key=Ctrl Shift 5
Macro="suv16_array ( downto 0);" 11 CharLeft

[Macro suv18_array]
Key=Alt Ctrl Shift 5
Macro="suv18_array ( downto 0);" 11 CharLeft

[Macro std_ulogic_vector]
Key=Ctrl 5
Macro="std_ulogic_vector ( downto 0);" 11 CharLeft

[Macro std_ulogic]
Key=Ctrl 6
Macro="std_ulogic;"

[Macro Process template]
Key=Ctrl 3
Macro="  --{{{\n"
Macro="  p_ : process\n"
Macro="  begin\n"
Macro="    wait until rising_edge(clk);\n"
Macro="  \n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro=LineEnd 2 LineStart 2 CharRight

[Macro Process (with async reset) template]
Key=Alt Ctrl 3
Macro="  --{{{\n"
Macro="  p_ : process (clk, reset)\n"
Macro="  begin\n"
Macro="    if reset='1' then\n"
Macro="      \n"
Macro="    elsif clk'event and clk='1' then\n"
Macro="      \n"
Macro="    end if;\n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro=LineEnd 2 LineStart 2 CharRight

[Macro Process (no clock) template]
Key=Ctrl Shift 3
Macro="  --{{{\n"
Macro="  p_ : process ()\n"
Macro="  begin\n"
Macro="  \n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro=LineEnd 2 LineStart 2 CharRight

[Macro map port]
Key=Ctrl 9
Key=Shift F9
Macro=LineEnd LineStart WordSelect Copy WordRight LineDeleteToEnd "=> ,"
Macro=CharLeft Paste LineStart LineDown

[Macro Library template]
Key=Ctrl 1
Macro=LineEnd
Macro="--{{{\n"
Macro="library ieee, exemplar, holly;\n"
Macro="use ieee.std_logic_1164.all;\n"
Macro="use exemplar.exemplar_1164.all;\n"
Macro="use holly.pkg_array.all;\n"
Macro="--}}}\n"

[Macro Entity+Architecture template]
Key=Ctrl 2
Macro=domacro "Library template"
Macro=LineDown LineEnd
Macro="--{{{\n"
Macro="entity  is\n"
Macro="  port (\n"
Macro="    );\n"
Macro="end ;\n"
Macro="--}}}\n"
Macro="--{{{\n"
Macro="architecture Xilinx of  is\n"
Macro="begin\n"
Macro="  --{{{\n"
Macro="  p_ : process\n"
Macro="  begin\n"
Macro="    wait until rising_edge(clk);\n"
Macro="  \n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro="end Xilinx;\n"
Macro="--}}}\n"
Macro=LineDown LineEnd 3 CharLeft

[Macro convert port to signal]
Key=Ctrl 0
Macro=2 LineIndentLess LineEnd LineStart "signal " 2 WordRight
Macro=WordDeleteRight LineDown LineStart

[Macro convert entity/component to port list]
Key=Alt Ctrl 0
Macro=FoldEnter GotoFoldBottom GotoFoldTop LineDown LineDelete
Macro=while comment LineDown end
Macro=LineEnd LineStart
Macro=if match "generic" LineDelete
Macro= while comment LineDelete end
Macro= LineEnd LineStart
Macro= while alpha
Macro=  LineDelete
Macro=  while comment LineDelete end
Macro=  LineEnd LineStart
Macro=  end LineDelete
Macro= end
Macro=while comment LineDown end
Macro=LineDelete
Macro=while comment LineDown end
Macro=LineEnd LineStart
Macro=while alpha
Macro= LineDown
Macro= while comment LineDown end
Macro= LineEnd LineStart
Macro= end
Macro=2 LineDelete LineUp
Macro=while comment LineUp end
Macro=LineEnd ";" FoldExit LineEnd 2 LineStart

[Macro convert entity/component fold to signals]
Key=Ctrl Shift 0
Macro=domacro "convert entity/component to port list"
Macro=FoldEnter GotoFoldBottom GotoFoldTop LineEnd "signals" LineDown
Macro=while comment LineDown end
Macro=LineEnd LineStart
Macro=while alpha
Macro= LineDeleteToStart "signal " 2 WordRight WordDeleteRight LineDown LineStart
Macro= while comment LineDown end
Macro= LineEnd LineStart
Macro= end
Macro=FoldExit LineEnd 2 LineStart

[Macro convert entity/component fold to instance and map all ports to signals]
Key=Ctrl Shift 9
Macro=FoldEnter GotoFoldBottom GotoFoldTop LineDown LineEnd LineStart 2 WordRight
Macro=if alpha LineDeleteToEnd end
Macro=LineEnd WordSelect Copy LineStart WordDelete "c_" Paste WordRight ": "
Macro=LineDown while comment LineDown end
Macro=LineEnd LineStart
Macro=if match "generic"
Macro= LineEnd CharLeft "map "
Macro= LineDown while comment LineDown end
Macro= LineEnd LineStart
Macro= while alpha
Macro=  WordSelect Copy WordRight LineDeleteToEnd "=> ," CharLeft Paste
Macro=  LineDown while comment LineDown end
Macro=  LineEnd LineStart
Macro=  end
Macro= LineUp while comment LineUp end
Macro= LineEnd CharDeleteLeft
Macro= LineDown while comment LineDown end
Macro= LineEnd CharDeleteLeft
Macro= LineDown while comment LineDown end
Macro= end
Macro=LineEnd CharLeft "map "
Macro=LineDown while comment LineDown end
Macro=LineEnd LineStart
Macro=while alpha
Macro= WordSelect Copy WordRight LineDeleteToEnd "=> ," CharLeft Paste
Macro= LineDown while comment LineDown end
Macro= LineEnd LineStart
Macro= end
Macro=LineDown LineDelete 2 LineUp while comment LineUp end
Macro=LineEnd CharDeleteLeft
Macro=FoldExit LineEnd 2 LineStart

[Macro convert entity fold to testbench for entity]
Key=Ctrl Shift 1
Macro=LineEnd LineStart 2 WordRight WordSelect Copy
Macro="--pragma translate_off\n"
Macro="--{{{\n"
Macro="entity a__tb is end;\n"
Macro="--}}}\n"
Macro="--{{{\n"
Macro="architecture sim of a__tb is\n"
Macro="begin\n"
Macro="  --{{{\n"
Macro="  p_clk : process\n"
Macro="  begin\n"
Macro="    clk <= '0';\n"
Macro="    wait for 5 ns;\n"
Macro="    clk <= '1';\n"
Macro="    wait for 5 ns;\n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro="  --{{{\n"
Macro="  p_tb : process\n"
Macro="  begin\n"
Macro="    wait until rising_edge(clk);\n"
Macro="    \n"
Macro="    wait;\n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro="end sim;\n"
Macro="--}}}\n"
Macro="--pragma translate_on\n"
Macro=LineDown
Macro=domacro "Library template"
Macro=LineDown LineEnd 11 CharLeft
Macro=Paste LineDown LineEnd 6 CharLeft Paste 2 LineDown
Macro=Cut 2 LineUp FoldEnter
Macro=GotoFoldBottom GotoFoldTop 2 LineDown Paste
Macro=domacro "convert entity fold to component"
Macro=LineDuplicate LineUp
Macro=domacro "convert entity/component fold to signals"
Macro=LineDown Copy LineDown Paste
Macro=domacro "convert entity/component fold to instance and map all ports to signals"
Macro=LineIndentMore LineIndentMore
Macro=FoldOpenEntered GotoFoldBottom 2 LineUp FoldOpen FoldOpenEntered
Macro=GotoFoldBottom 3 LineUp LineEnd

[Macro convert entity fold to test chip]
Key=Alt Ctrl 1
Macro=domacro "Library template"
Macro=LineDown LineDuplicate LineUp LineEnd 2 WordLeft
Macro=WordSelect Cut "atest" FoldOpen 3 LineDown
Macro=while comment LineDown end
Macro=LineEnd LineStart
Macro=while alpha
Macro= if match "clk" WordRight "  " else "p_" end
Macro= LineDown while comment LineDown end
Macro= LineEnd LineStart
Macro= end
Macro=FoldClose LineDown Cut LineUp LineEnd Return
Macro="--{{{\n"
Macro="architecture Xilinx of atest is\n"
Macro="begin\n"
Macro="--{{{\n"
Macro="p_iob : process\n"
Macro="begin\n"
Macro="  wait until rising_edge(clk);\n"
Macro="end process;\n"
Macro="--}}}\n"
Macro="end Xilinx;\n"
Macro="--}}}\n"
Macro=FoldOpen 2 LineDown Paste LineDown Paste 2 LineDown Paste LineDown
Macro=FoldOpen 4 LineDown Paste FoldClose 4 LineUp
Macro=domacro "convert entity/component fold to signals"
Macro=FoldOpen LineDown LineEnd LineStart WordRight
Macro=while alpha
Macro= if match "clk" LineDelete
Macro=  else LineDown while comment LineDown end
Macro=  end
Macro= LineEnd LineStart WordRight
Macro= end
Macro=FoldClose LineDown
Macro=domacro "convert entity fold to component"
Macro=2 LineDown
Macro=domacro "convert entity/component fold to instance and map all ports to signals"
Macro=LineDown FoldOpen 4 LineDown
Macro=domacro "convert entity/component to port list"
Macro=FoldEnter GotoFoldBottom GotoFoldTop LineDown
Macro=while comment LineDelete end
Macro=LineEnd LineStart
Macro=while alpha
Macro= WordRightSelect Copy WordDeleteRight
Macro= if match "in" LineDeleteToEnd "  <= p_" Paste LineEnd ";" LineStart
Macro=  else LineDeleteToEnd "<= " Paste LineEnd ";" LineStart "p_"
Macro=  end
Macro= if match "clk" LineDelete else 2 LineIndentLess LineDown end
Macro= while comment LineDown end LineEnd LineStart
Macro= end
Macro=FoldExit FoldRemove FoldClose

[Macro convert entity fold to component]
Key=Ctrl 8
Macro=FoldEnter GotoFoldBottom GotoFoldTop LineDown LineEnd LineStart
Macro=WordSelect CharDeleteRight "component" LineEnd 3 CharDeleteLeft
Macro=GotoFoldBottom LineUp LineEnd LineStart LineDeleteToEnd
Macro="end component;"
Macro=FoldExit

[Macro Clks Gen Process template]
Key=Alt Ctrl 4
Macro="  --{{{\n"
Macro="  p_clks : process\n"
Macro="  begin\n"
Macro="    clk33 <= '0';\n"
Macro="    clk66 <= '0';\n"
Macro="    wait for 5 ns;\n"
Macro="    clk33 <= '1';\n"
Macro="    clk66 <= '1';\n"
Macro="    wait for 5 ns;\n"
Macro="    clk33 <= '1';\n"
Macro="    clk66 <= '0';\n"
Macro="    wait for 5 ns;\n"
Macro="    clk33 <= '0';\n"
Macro="    clk66 <= '1';\n"
Macro="    wait for 5 ns;\n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro=LineEnd LineStart LineDown

[Macro Clk Gen Process template]
Key=Ctrl Shift 4
Macro="  --{{{\n"
Macro="  p_clk : process\n"
Macro="  begin\n"
Macro="    clk <= '0';\n"
Macro="    wait for 5 ns;\n"
Macro="    clk <= '1';\n"
Macro="    wait for 5 ns;\n"
Macro="  end process;\n"
Macro="  --}}}\n"
Macro=LineEnd LineStart LineDown

